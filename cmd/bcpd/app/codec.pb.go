// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/codec.proto

/*
	Package app is a generated protocol buffer package.

	It is generated from these files:
		app/codec.proto

	It has these top-level messages:
		Tx
		Sum
		BatchMsg
*/
package app

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import cash "github.com/iov-one/weave/x/cash"
import escrow "github.com/iov-one/weave/x/escrow"
import namecoin "github.com/iov-one/weave/x/namecoin"
import sigs "github.com/iov-one/weave/x/sigs"
import multisig "github.com/iov-one/weave/x/multisig"
import validators "github.com/iov-one/weave/x/validators"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Tx contains the message
type Tx struct {
	// msg is a sum type over all allowed messages on this chain.
	Sum *Sum `protobuf:"bytes,1,opt,name=sum" json:"sum,omitempty"`
	// fee info, autogenerates GetFees()
	Fees *cash.FeeInfo `protobuf:"bytes,2,opt,name=fees" json:"fees,omitempty"`
	// signatures, autogenerates GetSignatures()
	Signatures []*sigs.StdSignature `protobuf:"bytes,3,rep,name=signatures" json:"signatures,omitempty"`
	// preimage for hashlock, autogenerates GetPreimage
	Preimage []byte `protobuf:"bytes,4,opt,name=preimage,proto3" json:"preimage,omitempty"`
	// id of multisig contract, autogenerates GetMultisig
	Multisig [][]byte `protobuf:"bytes,5,rep,name=multisig" json:"multisig,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{0} }

func (m *Tx) GetSum() *Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Tx) GetFees() *cash.FeeInfo {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Tx) GetSignatures() []*sigs.StdSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Tx) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *Tx) GetMultisig() [][]byte {
	if m != nil {
		return m.Multisig
	}
	return nil
}

type Sum struct {
	// Types that are valid to be assigned to Sum:
	//	*Sum_SendMsg
	//	*Sum_NewTokenMsg
	//	*Sum_SetNameMsg
	//	*Sum_CreateEscrowMsg
	//	*Sum_ReleaseEscrowMsg
	//	*Sum_ReturnEscrowMsg
	//	*Sum_UpdateEscrowMsg
	//	*Sum_CreateContractMsg
	//	*Sum_UpdateContractMsg
	//	*Sum_SetValidatorsMsg
	//	*Sum_BatchMsg
	Sum isSum_Sum `protobuf_oneof:"sum"`
}

func (m *Sum) Reset()                    { *m = Sum{} }
func (m *Sum) String() string            { return proto.CompactTextString(m) }
func (*Sum) ProtoMessage()               {}
func (*Sum) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{1} }

type isSum_Sum interface {
	isSum_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Sum_SendMsg struct {
	SendMsg *cash.SendMsg `protobuf:"bytes,1,opt,name=send_msg,json=sendMsg,oneof"`
}
type Sum_NewTokenMsg struct {
	NewTokenMsg *namecoin.NewTokenMsg `protobuf:"bytes,2,opt,name=new_token_msg,json=newTokenMsg,oneof"`
}
type Sum_SetNameMsg struct {
	SetNameMsg *namecoin.SetWalletNameMsg `protobuf:"bytes,3,opt,name=set_name_msg,json=setNameMsg,oneof"`
}
type Sum_CreateEscrowMsg struct {
	CreateEscrowMsg *escrow.CreateEscrowMsg `protobuf:"bytes,4,opt,name=create_escrow_msg,json=createEscrowMsg,oneof"`
}
type Sum_ReleaseEscrowMsg struct {
	ReleaseEscrowMsg *escrow.ReleaseEscrowMsg `protobuf:"bytes,5,opt,name=release_escrow_msg,json=releaseEscrowMsg,oneof"`
}
type Sum_ReturnEscrowMsg struct {
	ReturnEscrowMsg *escrow.ReturnEscrowMsg `protobuf:"bytes,6,opt,name=return_escrow_msg,json=returnEscrowMsg,oneof"`
}
type Sum_UpdateEscrowMsg struct {
	UpdateEscrowMsg *escrow.UpdateEscrowPartiesMsg `protobuf:"bytes,7,opt,name=update_escrow_msg,json=updateEscrowMsg,oneof"`
}
type Sum_CreateContractMsg struct {
	CreateContractMsg *multisig.CreateContractMsg `protobuf:"bytes,8,opt,name=create_contract_msg,json=createContractMsg,oneof"`
}
type Sum_UpdateContractMsg struct {
	UpdateContractMsg *multisig.UpdateContractMsg `protobuf:"bytes,9,opt,name=update_contract_msg,json=updateContractMsg,oneof"`
}
type Sum_SetValidatorsMsg struct {
	SetValidatorsMsg *validators.SetValidatorsMsg `protobuf:"bytes,10,opt,name=set_validators_msg,json=setValidatorsMsg,oneof"`
}
type Sum_BatchMsg struct {
	BatchMsg *BatchMsg `protobuf:"bytes,11,opt,name=batch_msg,json=batchMsg,oneof"`
}

func (*Sum_SendMsg) isSum_Sum()           {}
func (*Sum_NewTokenMsg) isSum_Sum()       {}
func (*Sum_SetNameMsg) isSum_Sum()        {}
func (*Sum_CreateEscrowMsg) isSum_Sum()   {}
func (*Sum_ReleaseEscrowMsg) isSum_Sum()  {}
func (*Sum_ReturnEscrowMsg) isSum_Sum()   {}
func (*Sum_UpdateEscrowMsg) isSum_Sum()   {}
func (*Sum_CreateContractMsg) isSum_Sum() {}
func (*Sum_UpdateContractMsg) isSum_Sum() {}
func (*Sum_SetValidatorsMsg) isSum_Sum()  {}
func (*Sum_BatchMsg) isSum_Sum()          {}

func (m *Sum) GetSum() isSum_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Sum) GetSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*Sum_SendMsg); ok {
		return x.SendMsg
	}
	return nil
}

func (m *Sum) GetNewTokenMsg() *namecoin.NewTokenMsg {
	if x, ok := m.GetSum().(*Sum_NewTokenMsg); ok {
		return x.NewTokenMsg
	}
	return nil
}

func (m *Sum) GetSetNameMsg() *namecoin.SetWalletNameMsg {
	if x, ok := m.GetSum().(*Sum_SetNameMsg); ok {
		return x.SetNameMsg
	}
	return nil
}

func (m *Sum) GetCreateEscrowMsg() *escrow.CreateEscrowMsg {
	if x, ok := m.GetSum().(*Sum_CreateEscrowMsg); ok {
		return x.CreateEscrowMsg
	}
	return nil
}

func (m *Sum) GetReleaseEscrowMsg() *escrow.ReleaseEscrowMsg {
	if x, ok := m.GetSum().(*Sum_ReleaseEscrowMsg); ok {
		return x.ReleaseEscrowMsg
	}
	return nil
}

func (m *Sum) GetReturnEscrowMsg() *escrow.ReturnEscrowMsg {
	if x, ok := m.GetSum().(*Sum_ReturnEscrowMsg); ok {
		return x.ReturnEscrowMsg
	}
	return nil
}

func (m *Sum) GetUpdateEscrowMsg() *escrow.UpdateEscrowPartiesMsg {
	if x, ok := m.GetSum().(*Sum_UpdateEscrowMsg); ok {
		return x.UpdateEscrowMsg
	}
	return nil
}

func (m *Sum) GetCreateContractMsg() *multisig.CreateContractMsg {
	if x, ok := m.GetSum().(*Sum_CreateContractMsg); ok {
		return x.CreateContractMsg
	}
	return nil
}

func (m *Sum) GetUpdateContractMsg() *multisig.UpdateContractMsg {
	if x, ok := m.GetSum().(*Sum_UpdateContractMsg); ok {
		return x.UpdateContractMsg
	}
	return nil
}

func (m *Sum) GetSetValidatorsMsg() *validators.SetValidatorsMsg {
	if x, ok := m.GetSum().(*Sum_SetValidatorsMsg); ok {
		return x.SetValidatorsMsg
	}
	return nil
}

func (m *Sum) GetBatchMsg() *BatchMsg {
	if x, ok := m.GetSum().(*Sum_BatchMsg); ok {
		return x.BatchMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Sum) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Sum_OneofMarshaler, _Sum_OneofUnmarshaler, _Sum_OneofSizer, []interface{}{
		(*Sum_SendMsg)(nil),
		(*Sum_NewTokenMsg)(nil),
		(*Sum_SetNameMsg)(nil),
		(*Sum_CreateEscrowMsg)(nil),
		(*Sum_ReleaseEscrowMsg)(nil),
		(*Sum_ReturnEscrowMsg)(nil),
		(*Sum_UpdateEscrowMsg)(nil),
		(*Sum_CreateContractMsg)(nil),
		(*Sum_UpdateContractMsg)(nil),
		(*Sum_SetValidatorsMsg)(nil),
		(*Sum_BatchMsg)(nil),
	}
}

func _Sum_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Sum)
	// sum
	switch x := m.Sum.(type) {
	case *Sum_SendMsg:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendMsg); err != nil {
			return err
		}
	case *Sum_NewTokenMsg:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewTokenMsg); err != nil {
			return err
		}
	case *Sum_SetNameMsg:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetNameMsg); err != nil {
			return err
		}
	case *Sum_CreateEscrowMsg:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateEscrowMsg); err != nil {
			return err
		}
	case *Sum_ReleaseEscrowMsg:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReleaseEscrowMsg); err != nil {
			return err
		}
	case *Sum_ReturnEscrowMsg:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnEscrowMsg); err != nil {
			return err
		}
	case *Sum_UpdateEscrowMsg:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEscrowMsg); err != nil {
			return err
		}
	case *Sum_CreateContractMsg:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateContractMsg); err != nil {
			return err
		}
	case *Sum_UpdateContractMsg:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContractMsg); err != nil {
			return err
		}
	case *Sum_SetValidatorsMsg:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetValidatorsMsg); err != nil {
			return err
		}
	case *Sum_BatchMsg:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Sum.Sum has unexpected type %T", x)
	}
	return nil
}

func _Sum_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Sum)
	switch tag {
	case 1: // sum.send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_SendMsg{msg}
		return true, err
	case 2: // sum.new_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(namecoin.NewTokenMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_NewTokenMsg{msg}
		return true, err
	case 3: // sum.set_name_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(namecoin.SetWalletNameMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_SetNameMsg{msg}
		return true, err
	case 4: // sum.create_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.CreateEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_CreateEscrowMsg{msg}
		return true, err
	case 5: // sum.release_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_ReleaseEscrowMsg{msg}
		return true, err
	case 6: // sum.return_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_ReturnEscrowMsg{msg}
		return true, err
	case 7: // sum.update_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdateEscrowPartiesMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_UpdateEscrowMsg{msg}
		return true, err
	case 8: // sum.create_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.CreateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_CreateContractMsg{msg}
		return true, err
	case 9: // sum.update_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateContractMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_UpdateContractMsg{msg}
		return true, err
	case 10: // sum.set_validators_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.SetValidatorsMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_SetValidatorsMsg{msg}
		return true, err
	case 11: // sum.batch_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Sum_BatchMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Sum_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Sum)
	// sum
	switch x := m.Sum.(type) {
	case *Sum_SendMsg:
		s := proto.Size(x.SendMsg)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_NewTokenMsg:
		s := proto.Size(x.NewTokenMsg)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_SetNameMsg:
		s := proto.Size(x.SetNameMsg)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_CreateEscrowMsg:
		s := proto.Size(x.CreateEscrowMsg)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_ReleaseEscrowMsg:
		s := proto.Size(x.ReleaseEscrowMsg)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_ReturnEscrowMsg:
		s := proto.Size(x.ReturnEscrowMsg)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_UpdateEscrowMsg:
		s := proto.Size(x.UpdateEscrowMsg)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_CreateContractMsg:
		s := proto.Size(x.CreateContractMsg)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_UpdateContractMsg:
		s := proto.Size(x.UpdateContractMsg)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_SetValidatorsMsg:
		s := proto.Size(x.SetValidatorsMsg)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Sum_BatchMsg:
		s := proto.Size(x.BatchMsg)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BatchMsg encapsulates multiple messages to support batch transaction
type BatchMsg struct {
	Messages []Sum `protobuf:"bytes,1,rep,name=messages" json:"messages"`
}

func (m *BatchMsg) Reset()                    { *m = BatchMsg{} }
func (m *BatchMsg) String() string            { return proto.CompactTextString(m) }
func (*BatchMsg) ProtoMessage()               {}
func (*BatchMsg) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{2} }

func (m *BatchMsg) GetMessages() []Sum {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*Tx)(nil), "app.Tx")
	proto.RegisterType((*Sum)(nil), "app.Sum")
	proto.RegisterType((*BatchMsg)(nil), "app.BatchMsg")
}
func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Sum.Size()))
		n1, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Fees != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Fees.Size()))
		n2, err := m.Fees.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Signatures) > 0 {
		for _, msg := range m.Signatures {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Preimage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Preimage)))
		i += copy(dAtA[i:], m.Preimage)
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCodec(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Sum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		nn3, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Sum_SendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SendMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SendMsg.Size()))
		n4, err := m.SendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Sum_NewTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewTokenMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.NewTokenMsg.Size()))
		n5, err := m.NewTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Sum_SetNameMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetNameMsg != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SetNameMsg.Size()))
		n6, err := m.SetNameMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Sum_CreateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateEscrowMsg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateEscrowMsg.Size()))
		n7, err := m.CreateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Sum_ReleaseEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReleaseEscrowMsg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReleaseEscrowMsg.Size()))
		n8, err := m.ReleaseEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Sum_ReturnEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReturnEscrowMsg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReturnEscrowMsg.Size()))
		n9, err := m.ReturnEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Sum_UpdateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEscrowMsg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateEscrowMsg.Size()))
		n10, err := m.UpdateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Sum_CreateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateContractMsg != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateContractMsg.Size()))
		n11, err := m.CreateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Sum_UpdateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContractMsg != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateContractMsg.Size()))
		n12, err := m.UpdateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Sum_SetValidatorsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetValidatorsMsg != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SetValidatorsMsg.Size()))
		n13, err := m.SetValidatorsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Sum_BatchMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchMsg != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.BatchMsg.Size()))
		n14, err := m.BatchMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *BatchMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tx) Size() (n int) {
	var l int
	_ = l
	if m.Sum != nil {
		l = m.Sum.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	l = len(m.Preimage)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			l = len(b)
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func (m *Sum) Size() (n int) {
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Sum_SendMsg) Size() (n int) {
	var l int
	_ = l
	if m.SendMsg != nil {
		l = m.SendMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_NewTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.NewTokenMsg != nil {
		l = m.NewTokenMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_SetNameMsg) Size() (n int) {
	var l int
	_ = l
	if m.SetNameMsg != nil {
		l = m.SetNameMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_CreateEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.CreateEscrowMsg != nil {
		l = m.CreateEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_ReleaseEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.ReleaseEscrowMsg != nil {
		l = m.ReleaseEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_ReturnEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.ReturnEscrowMsg != nil {
		l = m.ReturnEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_UpdateEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.UpdateEscrowMsg != nil {
		l = m.UpdateEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_CreateContractMsg) Size() (n int) {
	var l int
	_ = l
	if m.CreateContractMsg != nil {
		l = m.CreateContractMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_UpdateContractMsg) Size() (n int) {
	var l int
	_ = l
	if m.UpdateContractMsg != nil {
		l = m.UpdateContractMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_SetValidatorsMsg) Size() (n int) {
	var l int
	_ = l
	if m.SetValidatorsMsg != nil {
		l = m.SetValidatorsMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Sum_BatchMsg) Size() (n int) {
	var l int
	_ = l
	if m.BatchMsg != nil {
		l = m.BatchMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *BatchMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sum == nil {
				m.Sum = &Sum{}
			}
			if err := m.Sum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &cash.FeeInfo{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &sigs.StdSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preimage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preimage = append(m.Preimage[:0], dAtA[iNdEx:postIndex]...)
			if m.Preimage == nil {
				m.Preimage = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = append(m.Multisig, make([]byte, postIndex-iNdEx))
			copy(m.Multisig[len(m.Multisig)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_SendMsg{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &namecoin.NewTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_NewTokenMsg{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetNameMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &namecoin.SetWalletNameMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_SetNameMsg{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.CreateEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_CreateEscrowMsg{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_ReleaseEscrowMsg{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_ReturnEscrowMsg{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdateEscrowPartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_UpdateEscrowMsg{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.CreateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_CreateContractMsg{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_UpdateContractMsg{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetValidatorsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.SetValidatorsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_SetValidatorsMsg{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Sum_BatchMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, Sum{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/codec.proto", fileDescriptorCodec) }

var fileDescriptorCodec = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xeb, 0x3a, 0x69, 0xd3, 0x4d, 0xab, 0xb6, 0xfb, 0xe9, 0x13, 0x56, 0x40, 0x21, 0xf4,
	0x54, 0x01, 0x5d, 0x8b, 0x22, 0x71, 0x41, 0xe2, 0x90, 0xaa, 0xa8, 0x48, 0x6d, 0x85, 0x9c, 0x02,
	0xc7, 0x68, 0xe3, 0x4c, 0x5d, 0x8b, 0xd8, 0x6b, 0xed, 0xae, 0x9b, 0x3e, 0x06, 0x6f, 0xc2, 0x6b,
	0xf4, 0xc8, 0x13, 0x20, 0x54, 0x9e, 0x81, 0x3b, 0xda, 0x59, 0x3b, 0xb1, 0x7d, 0x88, 0xb8, 0x79,
	0x66, 0xfe, 0xff, 0x9f, 0x67, 0x77, 0x67, 0xc8, 0x2e, 0xcf, 0x32, 0x3f, 0x14, 0x53, 0x08, 0x59,
	0x26, 0x85, 0x16, 0xd4, 0xe5, 0x59, 0xd6, 0x3b, 0x8a, 0x62, 0x7d, 0x93, 0x4f, 0x58, 0x28, 0x12,
	0x3f, 0x12, 0x91, 0xf0, 0xb1, 0x36, 0xc9, 0xaf, 0x31, 0xc2, 0x00, 0xbf, 0xac, 0xa7, 0xf7, 0xa2,
	0x22, 0x8f, 0xc5, 0xed, 0x91, 0x48, 0xc1, 0x9f, 0x03, 0xbf, 0x05, 0xff, 0xce, 0x0f, 0xb9, 0xba,
	0xa9, 0xfe, 0xa0, 0xc6, 0x6e, 0x8a, 0x41, 0x85, 0x52, 0xcc, 0x6b, 0x72, 0x7f, 0x85, 0x3c, 0xe5,
	0x09, 0x84, 0x22, 0x4e, 0x6b, 0x86, 0x55, 0xcd, 0xa8, 0x38, 0x52, 0xff, 0x4c, 0x4f, 0xf2, 0x99,
	0x8e, 0x55, 0x1c, 0xd5, 0x0c, 0xaf, 0x56, 0x18, 0x6e, 0xf9, 0x2c, 0x9e, 0x72, 0x2d, 0x64, 0xed,
	0x1f, 0x07, 0xdf, 0x1d, 0xb2, 0x7e, 0x75, 0x47, 0x7b, 0xc4, 0x55, 0x79, 0xe2, 0x39, 0x03, 0xe7,
	0xb0, 0x7b, 0xdc, 0x61, 0x3c, 0xcb, 0xd8, 0x28, 0x4f, 0x02, 0x93, 0xa4, 0xcf, 0x48, 0xeb, 0x1a,
	0x40, 0x79, 0xeb, 0x58, 0xdc, 0x61, 0xe6, 0xd2, 0xd8, 0x7b, 0x80, 0x0f, 0xe9, 0xb5, 0x08, 0xb0,
	0x44, 0x8f, 0x09, 0x51, 0x71, 0x94, 0x72, 0x9d, 0x4b, 0x50, 0x9e, 0x3b, 0x70, 0x0f, 0xbb, 0xc7,
	0x94, 0x99, 0x03, 0xb1, 0x91, 0x9e, 0x8e, 0xca, 0x52, 0x50, 0x51, 0xd1, 0x1e, 0xe9, 0x64, 0x12,
	0xe2, 0x84, 0x47, 0xe0, 0xb5, 0x06, 0xce, 0xe1, 0x76, 0xb0, 0x88, 0x4d, 0xad, 0x3c, 0xa0, 0xd7,
	0x1e, 0xb8, 0xa6, 0x56, 0xc6, 0x07, 0x7f, 0xda, 0xc4, 0x1d, 0xe5, 0x09, 0x7d, 0x4e, 0x3a, 0x0a,
	0xd2, 0xe9, 0x38, 0x51, 0x51, 0xd1, 0x77, 0xd1, 0xda, 0x08, 0xd2, 0xe9, 0x85, 0x8a, 0xce, 0xd6,
	0x82, 0x4d, 0x65, 0x3f, 0xe9, 0x5b, 0xb2, 0x93, 0xc2, 0x7c, 0xac, 0xc5, 0x57, 0x48, 0xd1, 0x60,
	0xcf, 0xf2, 0x3f, 0x2b, 0x1f, 0x89, 0x5d, 0xc2, 0xfc, 0xca, 0x54, 0xad, 0xb1, 0x9b, 0x2e, 0x43,
	0xfa, 0x8e, 0x6c, 0x2b, 0xd0, 0x63, 0x23, 0x45, 0xaf, 0x8b, 0xde, 0xde, 0xd2, 0x3b, 0x02, 0xfd,
	0x85, 0xcf, 0x66, 0xa0, 0x2f, 0x79, 0x02, 0x16, 0x40, 0xd4, 0x22, 0xa2, 0xa7, 0x64, 0x3f, 0x94,
	0xc0, 0x35, 0x8c, 0xed, 0x04, 0x21, 0xa4, 0x85, 0x90, 0x47, 0xcc, 0xa6, 0xd8, 0x09, 0x0a, 0x4e,
	0x31, 0xb0, 0x84, 0xdd, 0xb0, 0x9e, 0xa2, 0x67, 0x84, 0x4a, 0x98, 0x01, 0x57, 0x35, 0x4e, 0x1b,
	0x39, 0x5e, 0xc9, 0x09, 0xac, 0xa2, 0x0a, 0xda, 0x93, 0x8d, 0x9c, 0x69, 0x48, 0x82, 0xce, 0x65,
	0x5a, 0x05, 0x6d, 0xd4, 0x1b, 0x0a, 0x50, 0x50, 0x6b, 0x48, 0xd6, 0x53, 0xf4, 0x9c, 0xec, 0xe7,
	0xd9, 0xb4, 0x71, 0xae, 0x4d, 0xc4, 0xf4, 0x4b, 0xcc, 0x27, 0x14, 0x58, 0xcf, 0x47, 0x2e, 0x75,
	0x0c, 0xaa, 0xa0, 0xe5, 0x95, 0x8a, 0xa1, 0x5d, 0x90, 0xff, 0x8a, 0x5b, 0x0a, 0x45, 0xaa, 0x25,
	0x0f, 0x35, 0xf2, 0x3a, 0xc8, 0x7b, 0xcc, 0xca, 0xe7, 0x2f, 0x6e, 0xea, 0xa4, 0xd0, 0x58, 0x58,
	0x71, 0xbf, 0x95, 0xa4, 0xc1, 0x15, 0xcd, 0xd5, 0x70, 0x5b, 0x4d, 0x9c, 0x6d, 0xb0, 0x81, 0xcb,
	0x9b, 0x49, 0x7a, 0x4e, 0xa8, 0x99, 0x81, 0xe5, 0x12, 0x21, 0x8d, 0x20, 0xed, 0x09, 0x5b, 0xa6,
	0xcd, 0x2c, 0x7c, 0x5e, 0x44, 0xc5, 0x03, 0xa8, 0x46, 0x8e, 0xbe, 0x24, 0x5b, 0x13, 0xae, 0xc3,
	0x1b, 0x84, 0x74, 0x8b, 0xd9, 0x35, 0x3b, 0x37, 0x34, 0x59, 0xeb, 0xea, 0x4c, 0x8a, 0xef, 0x61,
	0x1b, 0x77, 0xf3, 0xe0, 0x0d, 0xe9, 0x94, 0x65, 0x33, 0xfb, 0x09, 0x28, 0xc5, 0x23, 0x50, 0x9e,
	0x83, 0xdb, 0xb6, 0xd8, 0xd9, 0x61, 0xeb, 0xfe, 0xe7, 0xd3, 0xb5, 0x60, 0x51, 0x1f, 0xee, 0xdd,
	0x3f, 0xf4, 0x9d, 0x1f, 0x0f, 0x7d, 0xe7, 0xd7, 0x43, 0xdf, 0xf9, 0xf6, 0xbb, 0xbf, 0x36, 0xd9,
	0xc0, 0xd5, 0x7f, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xd7, 0xd7, 0xed, 0x5f, 0x05, 0x00,
	0x00,
}
