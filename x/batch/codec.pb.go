// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/batch/codec.proto

/*
	Package batch is a generated protocol buffer package.

	It is generated from these files:
		x/batch/codec.proto

	It has these top-level messages:
		ExecuteBatchMsg
*/
package batch

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import cash "github.com/iov-one/weave/x/cash"
import escrow "github.com/iov-one/weave/x/escrow"
import namecoin "github.com/iov-one/weave/x/namecoin"
import _ "github.com/iov-one/weave/x/sigs"
import multisig "github.com/iov-one/weave/x/multisig"
import nft "github.com/iov-one/weave/x/nft"
import blockchain "github.com/iov-one/weave/x/nft/blockchain"
import ticker "github.com/iov-one/weave/x/nft/ticker"
import username "github.com/iov-one/weave/x/nft/username"
import bootstrap_node "github.com/iov-one/weave/x/nft/bootstrap_node"
import validators "github.com/iov-one/weave/x/validators"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ExecuteBatchMsg encapsulates multiple messages to support batch transaction
type ExecuteBatchMsg struct {
	Messages []*ExecuteBatchMsg_Msg `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *ExecuteBatchMsg) Reset()                    { *m = ExecuteBatchMsg{} }
func (m *ExecuteBatchMsg) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchMsg) ProtoMessage()               {}
func (*ExecuteBatchMsg) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{0} }

func (m *ExecuteBatchMsg) GetMessages() []*ExecuteBatchMsg_Msg {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Msg is a workaround as protobuf does not support repeated oneof
type ExecuteBatchMsg_Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*ExecuteBatchMsg_Msg_SendMsg
	//	*ExecuteBatchMsg_Msg_NewTokenMsg
	//	*ExecuteBatchMsg_Msg_SetNameMsg
	//	*ExecuteBatchMsg_Msg_CreateEscrowMsg
	//	*ExecuteBatchMsg_Msg_ReleaseEscrowMsg
	//	*ExecuteBatchMsg_Msg_ReturnEscrowMsg
	//	*ExecuteBatchMsg_Msg_UpdateEscrowMsg
	//	*ExecuteBatchMsg_Msg_CreateContractMsg
	//	*ExecuteBatchMsg_Msg_UpdateContractMsg
	//	*ExecuteBatchMsg_Msg_SetValidatorsMsg
	//	*ExecuteBatchMsg_Msg_AddApprovalMsg
	//	*ExecuteBatchMsg_Msg_RemoveApprovalMsg
	//	*ExecuteBatchMsg_Msg_IssueUsernameNftMsg
	//	*ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg
	//	*ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg
	//	*ExecuteBatchMsg_Msg_IssueBlockchainNftMsg
	//	*ExecuteBatchMsg_Msg_IssueTickerNftMsg
	//	*ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg
	Msg isExecuteBatchMsg_Msg_Msg `protobuf_oneof:"msg"`
}

func (m *ExecuteBatchMsg_Msg) Reset()                    { *m = ExecuteBatchMsg_Msg{} }
func (m *ExecuteBatchMsg_Msg) String() string            { return proto.CompactTextString(m) }
func (*ExecuteBatchMsg_Msg) ProtoMessage()               {}
func (*ExecuteBatchMsg_Msg) Descriptor() ([]byte, []int) { return fileDescriptorCodec, []int{0, 0} }

type isExecuteBatchMsg_Msg_Msg interface {
	isExecuteBatchMsg_Msg_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecuteBatchMsg_Msg_SendMsg struct {
	SendMsg *cash.SendMsg `protobuf:"bytes,1,opt,name=send_msg,json=sendMsg,oneof"`
}
type ExecuteBatchMsg_Msg_NewTokenMsg struct {
	NewTokenMsg *namecoin.NewTokenMsg `protobuf:"bytes,2,opt,name=new_token_msg,json=newTokenMsg,oneof"`
}
type ExecuteBatchMsg_Msg_SetNameMsg struct {
	SetNameMsg *namecoin.SetWalletNameMsg `protobuf:"bytes,3,opt,name=set_name_msg,json=setNameMsg,oneof"`
}
type ExecuteBatchMsg_Msg_CreateEscrowMsg struct {
	CreateEscrowMsg *escrow.CreateEscrowMsg `protobuf:"bytes,4,opt,name=create_escrow_msg,json=createEscrowMsg,oneof"`
}
type ExecuteBatchMsg_Msg_ReleaseEscrowMsg struct {
	ReleaseEscrowMsg *escrow.ReleaseEscrowMsg `protobuf:"bytes,5,opt,name=release_escrow_msg,json=releaseEscrowMsg,oneof"`
}
type ExecuteBatchMsg_Msg_ReturnEscrowMsg struct {
	ReturnEscrowMsg *escrow.ReturnEscrowMsg `protobuf:"bytes,6,opt,name=return_escrow_msg,json=returnEscrowMsg,oneof"`
}
type ExecuteBatchMsg_Msg_UpdateEscrowMsg struct {
	UpdateEscrowMsg *escrow.UpdateEscrowPartiesMsg `protobuf:"bytes,7,opt,name=update_escrow_msg,json=updateEscrowMsg,oneof"`
}
type ExecuteBatchMsg_Msg_CreateContractMsg struct {
	CreateContractMsg *multisig.CreateContractMsg `protobuf:"bytes,8,opt,name=create_contract_msg,json=createContractMsg,oneof"`
}
type ExecuteBatchMsg_Msg_UpdateContractMsg struct {
	UpdateContractMsg *multisig.UpdateContractMsg `protobuf:"bytes,9,opt,name=update_contract_msg,json=updateContractMsg,oneof"`
}
type ExecuteBatchMsg_Msg_SetValidatorsMsg struct {
	SetValidatorsMsg *validators.SetValidatorsMsg `protobuf:"bytes,10,opt,name=set_validators_msg,json=setValidatorsMsg,oneof"`
}
type ExecuteBatchMsg_Msg_AddApprovalMsg struct {
	AddApprovalMsg *nft.AddApprovalMsg `protobuf:"bytes,11,opt,name=add_approval_msg,json=addApprovalMsg,oneof"`
}
type ExecuteBatchMsg_Msg_RemoveApprovalMsg struct {
	RemoveApprovalMsg *nft.RemoveApprovalMsg `protobuf:"bytes,12,opt,name=remove_approval_msg,json=removeApprovalMsg,oneof"`
}
type ExecuteBatchMsg_Msg_IssueUsernameNftMsg struct {
	IssueUsernameNftMsg *username.IssueTokenMsg `protobuf:"bytes,13,opt,name=issue_username_nft_msg,json=issueUsernameNftMsg,oneof"`
}
type ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg struct {
	AddUsernameAddressNftMsg *username.AddChainAddressMsg `protobuf:"bytes,14,opt,name=add_username_address_nft_msg,json=addUsernameAddressNftMsg,oneof"`
}
type ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg struct {
	RemoveUsernameAddressMsg *username.RemoveChainAddressMsg `protobuf:"bytes,15,opt,name=remove_username_address_msg,json=removeUsernameAddressMsg,oneof"`
}
type ExecuteBatchMsg_Msg_IssueBlockchainNftMsg struct {
	IssueBlockchainNftMsg *blockchain.IssueTokenMsg `protobuf:"bytes,16,opt,name=issue_blockchain_nft_msg,json=issueBlockchainNftMsg,oneof"`
}
type ExecuteBatchMsg_Msg_IssueTickerNftMsg struct {
	IssueTickerNftMsg *ticker.IssueTokenMsg `protobuf:"bytes,17,opt,name=issue_ticker_nft_msg,json=issueTickerNftMsg,oneof"`
}
type ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg struct {
	IssueBootstrapNodeNftMsg *bootstrap_node.IssueTokenMsg `protobuf:"bytes,18,opt,name=issue_bootstrap_node_nft_msg,json=issueBootstrapNodeNftMsg,oneof"`
}

func (*ExecuteBatchMsg_Msg_SendMsg) isExecuteBatchMsg_Msg_Msg()                  {}
func (*ExecuteBatchMsg_Msg_NewTokenMsg) isExecuteBatchMsg_Msg_Msg()              {}
func (*ExecuteBatchMsg_Msg_SetNameMsg) isExecuteBatchMsg_Msg_Msg()               {}
func (*ExecuteBatchMsg_Msg_CreateEscrowMsg) isExecuteBatchMsg_Msg_Msg()          {}
func (*ExecuteBatchMsg_Msg_ReleaseEscrowMsg) isExecuteBatchMsg_Msg_Msg()         {}
func (*ExecuteBatchMsg_Msg_ReturnEscrowMsg) isExecuteBatchMsg_Msg_Msg()          {}
func (*ExecuteBatchMsg_Msg_UpdateEscrowMsg) isExecuteBatchMsg_Msg_Msg()          {}
func (*ExecuteBatchMsg_Msg_CreateContractMsg) isExecuteBatchMsg_Msg_Msg()        {}
func (*ExecuteBatchMsg_Msg_UpdateContractMsg) isExecuteBatchMsg_Msg_Msg()        {}
func (*ExecuteBatchMsg_Msg_SetValidatorsMsg) isExecuteBatchMsg_Msg_Msg()         {}
func (*ExecuteBatchMsg_Msg_AddApprovalMsg) isExecuteBatchMsg_Msg_Msg()           {}
func (*ExecuteBatchMsg_Msg_RemoveApprovalMsg) isExecuteBatchMsg_Msg_Msg()        {}
func (*ExecuteBatchMsg_Msg_IssueUsernameNftMsg) isExecuteBatchMsg_Msg_Msg()      {}
func (*ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg) isExecuteBatchMsg_Msg_Msg() {}
func (*ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg) isExecuteBatchMsg_Msg_Msg() {}
func (*ExecuteBatchMsg_Msg_IssueBlockchainNftMsg) isExecuteBatchMsg_Msg_Msg()    {}
func (*ExecuteBatchMsg_Msg_IssueTickerNftMsg) isExecuteBatchMsg_Msg_Msg()        {}
func (*ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg) isExecuteBatchMsg_Msg_Msg() {}

func (m *ExecuteBatchMsg_Msg) GetMsg() isExecuteBatchMsg_Msg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetSendMsg() *cash.SendMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_SendMsg); ok {
		return x.SendMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetNewTokenMsg() *namecoin.NewTokenMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_NewTokenMsg); ok {
		return x.NewTokenMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetSetNameMsg() *namecoin.SetWalletNameMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_SetNameMsg); ok {
		return x.SetNameMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetCreateEscrowMsg() *escrow.CreateEscrowMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_CreateEscrowMsg); ok {
		return x.CreateEscrowMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetReleaseEscrowMsg() *escrow.ReleaseEscrowMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_ReleaseEscrowMsg); ok {
		return x.ReleaseEscrowMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetReturnEscrowMsg() *escrow.ReturnEscrowMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_ReturnEscrowMsg); ok {
		return x.ReturnEscrowMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetUpdateEscrowMsg() *escrow.UpdateEscrowPartiesMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_UpdateEscrowMsg); ok {
		return x.UpdateEscrowMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetCreateContractMsg() *multisig.CreateContractMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_CreateContractMsg); ok {
		return x.CreateContractMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetUpdateContractMsg() *multisig.UpdateContractMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_UpdateContractMsg); ok {
		return x.UpdateContractMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetSetValidatorsMsg() *validators.SetValidatorsMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_SetValidatorsMsg); ok {
		return x.SetValidatorsMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetAddApprovalMsg() *nft.AddApprovalMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_AddApprovalMsg); ok {
		return x.AddApprovalMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetRemoveApprovalMsg() *nft.RemoveApprovalMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_RemoveApprovalMsg); ok {
		return x.RemoveApprovalMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetIssueUsernameNftMsg() *username.IssueTokenMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_IssueUsernameNftMsg); ok {
		return x.IssueUsernameNftMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetAddUsernameAddressNftMsg() *username.AddChainAddressMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg); ok {
		return x.AddUsernameAddressNftMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetRemoveUsernameAddressMsg() *username.RemoveChainAddressMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg); ok {
		return x.RemoveUsernameAddressMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetIssueBlockchainNftMsg() *blockchain.IssueTokenMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_IssueBlockchainNftMsg); ok {
		return x.IssueBlockchainNftMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetIssueTickerNftMsg() *ticker.IssueTokenMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_IssueTickerNftMsg); ok {
		return x.IssueTickerNftMsg
	}
	return nil
}

func (m *ExecuteBatchMsg_Msg) GetIssueBootstrapNodeNftMsg() *bootstrap_node.IssueTokenMsg {
	if x, ok := m.GetMsg().(*ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg); ok {
		return x.IssueBootstrapNodeNftMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecuteBatchMsg_Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecuteBatchMsg_Msg_OneofMarshaler, _ExecuteBatchMsg_Msg_OneofUnmarshaler, _ExecuteBatchMsg_Msg_OneofSizer, []interface{}{
		(*ExecuteBatchMsg_Msg_SendMsg)(nil),
		(*ExecuteBatchMsg_Msg_NewTokenMsg)(nil),
		(*ExecuteBatchMsg_Msg_SetNameMsg)(nil),
		(*ExecuteBatchMsg_Msg_CreateEscrowMsg)(nil),
		(*ExecuteBatchMsg_Msg_ReleaseEscrowMsg)(nil),
		(*ExecuteBatchMsg_Msg_ReturnEscrowMsg)(nil),
		(*ExecuteBatchMsg_Msg_UpdateEscrowMsg)(nil),
		(*ExecuteBatchMsg_Msg_CreateContractMsg)(nil),
		(*ExecuteBatchMsg_Msg_UpdateContractMsg)(nil),
		(*ExecuteBatchMsg_Msg_SetValidatorsMsg)(nil),
		(*ExecuteBatchMsg_Msg_AddApprovalMsg)(nil),
		(*ExecuteBatchMsg_Msg_RemoveApprovalMsg)(nil),
		(*ExecuteBatchMsg_Msg_IssueUsernameNftMsg)(nil),
		(*ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg)(nil),
		(*ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg)(nil),
		(*ExecuteBatchMsg_Msg_IssueBlockchainNftMsg)(nil),
		(*ExecuteBatchMsg_Msg_IssueTickerNftMsg)(nil),
		(*ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg)(nil),
	}
}

func _ExecuteBatchMsg_Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecuteBatchMsg_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *ExecuteBatchMsg_Msg_SendMsg:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_NewTokenMsg:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewTokenMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_SetNameMsg:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetNameMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_CreateEscrowMsg:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateEscrowMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_ReleaseEscrowMsg:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReleaseEscrowMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_ReturnEscrowMsg:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnEscrowMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_UpdateEscrowMsg:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateEscrowMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_CreateContractMsg:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateContractMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_UpdateContractMsg:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateContractMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_SetValidatorsMsg:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetValidatorsMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_AddApprovalMsg:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddApprovalMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_RemoveApprovalMsg:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveApprovalMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_IssueUsernameNftMsg:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IssueUsernameNftMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddUsernameAddressNftMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveUsernameAddressMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_IssueBlockchainNftMsg:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IssueBlockchainNftMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_IssueTickerNftMsg:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IssueTickerNftMsg); err != nil {
			return err
		}
	case *ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IssueBootstrapNodeNftMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecuteBatchMsg_Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _ExecuteBatchMsg_Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecuteBatchMsg_Msg)
	switch tag {
	case 1: // msg.send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_SendMsg{msg}
		return true, err
	case 2: // msg.new_token_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(namecoin.NewTokenMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_NewTokenMsg{msg}
		return true, err
	case 3: // msg.set_name_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(namecoin.SetWalletNameMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_SetNameMsg{msg}
		return true, err
	case 4: // msg.create_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.CreateEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_CreateEscrowMsg{msg}
		return true, err
	case 5: // msg.release_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReleaseEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_ReleaseEscrowMsg{msg}
		return true, err
	case 6: // msg.return_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.ReturnEscrowMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_ReturnEscrowMsg{msg}
		return true, err
	case 7: // msg.update_escrow_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(escrow.UpdateEscrowPartiesMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_UpdateEscrowMsg{msg}
		return true, err
	case 8: // msg.create_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.CreateContractMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_CreateContractMsg{msg}
		return true, err
	case 9: // msg.update_contract_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(multisig.UpdateContractMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_UpdateContractMsg{msg}
		return true, err
	case 10: // msg.set_validators_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(validators.SetValidatorsMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_SetValidatorsMsg{msg}
		return true, err
	case 11: // msg.add_approval_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(nft.AddApprovalMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_AddApprovalMsg{msg}
		return true, err
	case 12: // msg.remove_approval_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(nft.RemoveApprovalMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_RemoveApprovalMsg{msg}
		return true, err
	case 13: // msg.issue_username_nft_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.IssueTokenMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_IssueUsernameNftMsg{msg}
		return true, err
	case 14: // msg.add_username_address_nft_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.AddChainAddressMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg{msg}
		return true, err
	case 15: // msg.remove_username_address_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(username.RemoveChainAddressMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg{msg}
		return true, err
	case 16: // msg.issue_blockchain_nft_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(blockchain.IssueTokenMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_IssueBlockchainNftMsg{msg}
		return true, err
	case 17: // msg.issue_ticker_nft_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ticker.IssueTokenMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_IssueTickerNftMsg{msg}
		return true, err
	case 18: // msg.issue_bootstrap_node_nft_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(bootstrap_node.IssueTokenMsg)
		err := b.DecodeMessage(msg)
		m.Msg = &ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecuteBatchMsg_Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecuteBatchMsg_Msg)
	// msg
	switch x := m.Msg.(type) {
	case *ExecuteBatchMsg_Msg_SendMsg:
		s := proto.Size(x.SendMsg)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_NewTokenMsg:
		s := proto.Size(x.NewTokenMsg)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_SetNameMsg:
		s := proto.Size(x.SetNameMsg)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_CreateEscrowMsg:
		s := proto.Size(x.CreateEscrowMsg)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_ReleaseEscrowMsg:
		s := proto.Size(x.ReleaseEscrowMsg)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_ReturnEscrowMsg:
		s := proto.Size(x.ReturnEscrowMsg)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_UpdateEscrowMsg:
		s := proto.Size(x.UpdateEscrowMsg)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_CreateContractMsg:
		s := proto.Size(x.CreateContractMsg)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_UpdateContractMsg:
		s := proto.Size(x.UpdateContractMsg)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_SetValidatorsMsg:
		s := proto.Size(x.SetValidatorsMsg)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_AddApprovalMsg:
		s := proto.Size(x.AddApprovalMsg)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_RemoveApprovalMsg:
		s := proto.Size(x.RemoveApprovalMsg)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_IssueUsernameNftMsg:
		s := proto.Size(x.IssueUsernameNftMsg)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg:
		s := proto.Size(x.AddUsernameAddressNftMsg)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg:
		s := proto.Size(x.RemoveUsernameAddressMsg)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_IssueBlockchainNftMsg:
		s := proto.Size(x.IssueBlockchainNftMsg)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_IssueTickerNftMsg:
		s := proto.Size(x.IssueTickerNftMsg)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg:
		s := proto.Size(x.IssueBootstrapNodeNftMsg)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ExecuteBatchMsg)(nil), "batch.ExecuteBatchMsg")
	proto.RegisterType((*ExecuteBatchMsg_Msg)(nil), "batch.ExecuteBatchMsg.Msg")
}
func (m *ExecuteBatchMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteBatchMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExecuteBatchMsg_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteBatchMsg_Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ExecuteBatchMsg_Msg_SendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SendMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SendMsg.Size()))
		n2, err := m.SendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_NewTokenMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewTokenMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.NewTokenMsg.Size()))
		n3, err := m.NewTokenMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_SetNameMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetNameMsg != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SetNameMsg.Size()))
		n4, err := m.SetNameMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_CreateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateEscrowMsg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateEscrowMsg.Size()))
		n5, err := m.CreateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_ReleaseEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReleaseEscrowMsg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReleaseEscrowMsg.Size()))
		n6, err := m.ReleaseEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_ReturnEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReturnEscrowMsg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ReturnEscrowMsg.Size()))
		n7, err := m.ReturnEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_UpdateEscrowMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateEscrowMsg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateEscrowMsg.Size()))
		n8, err := m.UpdateEscrowMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_CreateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateContractMsg != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateContractMsg.Size()))
		n9, err := m.CreateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_UpdateContractMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateContractMsg != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.UpdateContractMsg.Size()))
		n10, err := m.UpdateContractMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_SetValidatorsMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetValidatorsMsg != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.SetValidatorsMsg.Size()))
		n11, err := m.SetValidatorsMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_AddApprovalMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddApprovalMsg != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AddApprovalMsg.Size()))
		n12, err := m.AddApprovalMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_RemoveApprovalMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RemoveApprovalMsg != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.RemoveApprovalMsg.Size()))
		n13, err := m.RemoveApprovalMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_IssueUsernameNftMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IssueUsernameNftMsg != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.IssueUsernameNftMsg.Size()))
		n14, err := m.IssueUsernameNftMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddUsernameAddressNftMsg != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.AddUsernameAddressNftMsg.Size()))
		n15, err := m.AddUsernameAddressNftMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RemoveUsernameAddressMsg != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.RemoveUsernameAddressMsg.Size()))
		n16, err := m.RemoveUsernameAddressMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_IssueBlockchainNftMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IssueBlockchainNftMsg != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.IssueBlockchainNftMsg.Size()))
		n17, err := m.IssueBlockchainNftMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_IssueTickerNftMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IssueTickerNftMsg != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.IssueTickerNftMsg.Size()))
		n18, err := m.IssueTickerNftMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IssueBootstrapNodeNftMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.IssueBootstrapNodeNftMsg.Size()))
		n19, err := m.IssueBootstrapNodeNftMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExecuteBatchMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	return n
}

func (m *ExecuteBatchMsg_Msg) Size() (n int) {
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *ExecuteBatchMsg_Msg_SendMsg) Size() (n int) {
	var l int
	_ = l
	if m.SendMsg != nil {
		l = m.SendMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_NewTokenMsg) Size() (n int) {
	var l int
	_ = l
	if m.NewTokenMsg != nil {
		l = m.NewTokenMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_SetNameMsg) Size() (n int) {
	var l int
	_ = l
	if m.SetNameMsg != nil {
		l = m.SetNameMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_CreateEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.CreateEscrowMsg != nil {
		l = m.CreateEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_ReleaseEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.ReleaseEscrowMsg != nil {
		l = m.ReleaseEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_ReturnEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.ReturnEscrowMsg != nil {
		l = m.ReturnEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_UpdateEscrowMsg) Size() (n int) {
	var l int
	_ = l
	if m.UpdateEscrowMsg != nil {
		l = m.UpdateEscrowMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_CreateContractMsg) Size() (n int) {
	var l int
	_ = l
	if m.CreateContractMsg != nil {
		l = m.CreateContractMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_UpdateContractMsg) Size() (n int) {
	var l int
	_ = l
	if m.UpdateContractMsg != nil {
		l = m.UpdateContractMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_SetValidatorsMsg) Size() (n int) {
	var l int
	_ = l
	if m.SetValidatorsMsg != nil {
		l = m.SetValidatorsMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_AddApprovalMsg) Size() (n int) {
	var l int
	_ = l
	if m.AddApprovalMsg != nil {
		l = m.AddApprovalMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_RemoveApprovalMsg) Size() (n int) {
	var l int
	_ = l
	if m.RemoveApprovalMsg != nil {
		l = m.RemoveApprovalMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_IssueUsernameNftMsg) Size() (n int) {
	var l int
	_ = l
	if m.IssueUsernameNftMsg != nil {
		l = m.IssueUsernameNftMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg) Size() (n int) {
	var l int
	_ = l
	if m.AddUsernameAddressNftMsg != nil {
		l = m.AddUsernameAddressNftMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg) Size() (n int) {
	var l int
	_ = l
	if m.RemoveUsernameAddressMsg != nil {
		l = m.RemoveUsernameAddressMsg.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_IssueBlockchainNftMsg) Size() (n int) {
	var l int
	_ = l
	if m.IssueBlockchainNftMsg != nil {
		l = m.IssueBlockchainNftMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_IssueTickerNftMsg) Size() (n int) {
	var l int
	_ = l
	if m.IssueTickerNftMsg != nil {
		l = m.IssueTickerNftMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg) Size() (n int) {
	var l int
	_ = l
	if m.IssueBootstrapNodeNftMsg != nil {
		l = m.IssueBootstrapNodeNftMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecuteBatchMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteBatchMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteBatchMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &ExecuteBatchMsg_Msg{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteBatchMsg_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_SendMsg{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTokenMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &namecoin.NewTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_NewTokenMsg{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetNameMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &namecoin.SetWalletNameMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_SetNameMsg{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.CreateEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_CreateEscrowMsg{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReleaseEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_ReleaseEscrowMsg{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.ReturnEscrowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_ReturnEscrowMsg{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEscrowMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &escrow.UpdateEscrowPartiesMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_UpdateEscrowMsg{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.CreateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_CreateContractMsg{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContractMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &multisig.UpdateContractMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_UpdateContractMsg{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetValidatorsMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &validators.SetValidatorsMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_SetValidatorsMsg{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddApprovalMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nft.AddApprovalMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_AddApprovalMsg{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveApprovalMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nft.RemoveApprovalMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_RemoveApprovalMsg{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueUsernameNftMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.IssueTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_IssueUsernameNftMsg{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddUsernameAddressNftMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.AddChainAddressMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_AddUsernameAddressNftMsg{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveUsernameAddressMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &username.RemoveChainAddressMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_RemoveUsernameAddressMsg{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBlockchainNftMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &blockchain.IssueTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_IssueBlockchainNftMsg{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueTickerNftMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ticker.IssueTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_IssueTickerNftMsg{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBootstrapNodeNftMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &bootstrap_node.IssueTokenMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ExecuteBatchMsg_Msg_IssueBootstrapNodeNftMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("x/batch/codec.proto", fileDescriptorCodec) }

var fileDescriptorCodec = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xe1, 0x8e, 0x1b, 0x35,
	0x10, 0xc7, 0x1b, 0xc2, 0xb5, 0x87, 0xd3, 0xeb, 0x25, 0x1b, 0x5a, 0x42, 0x7a, 0x84, 0x8a, 0x4f,
	0x55, 0x51, 0x1d, 0xd1, 0x0a, 0x24, 0x84, 0x04, 0x4a, 0x4e, 0x27, 0x05, 0xa9, 0x89, 0x50, 0x7a,
	0x07, 0xdf, 0x58, 0x9c, 0xf5, 0x64, 0x6f, 0x75, 0xd9, 0x75, 0x64, 0x7b, 0x93, 0x7b, 0x0c, 0x5e,
	0x85, 0xb7, 0xe0, 0x23, 0x8f, 0x80, 0x0e, 0xf1, 0x1e, 0xc8, 0x63, 0xef, 0x26, 0xde, 0xa0, 0xe4,
	0xbe, 0xc5, 0x33, 0xff, 0xff, 0xcf, 0xe3, 0xc9, 0xec, 0x90, 0xf6, 0x6d, 0x7f, 0xc6, 0x74, 0x74,
	0xdd, 0x8f, 0x04, 0x87, 0x88, 0x2e, 0xa5, 0xd0, 0x22, 0x38, 0xc2, 0x50, 0xf7, 0xcb, 0x38, 0xd1,
	0xd7, 0xf9, 0x8c, 0x46, 0x22, 0xed, 0x27, 0x62, 0xf5, 0x5a, 0x64, 0xd0, 0x5f, 0x03, 0x5b, 0x41,
	0xff, 0xb6, 0x1f, 0x31, 0xe5, 0x79, 0xba, 0xaf, 0xf7, 0x88, 0x41, 0x45, 0x52, 0xac, 0x3d, 0x79,
	0x7f, 0x8f, 0x3c, 0x63, 0x29, 0x44, 0x22, 0xc9, 0x3c, 0xc3, 0xbe, 0x62, 0x54, 0x12, 0xab, 0x7b,
	0xd3, 0xd3, 0x7c, 0xa1, 0x13, 0x95, 0xc4, 0x9e, 0xe1, 0xd5, 0xbe, 0x72, 0xe6, 0xda, 0xd3, 0x7e,
	0x7d, 0x40, 0x3b, 0x5b, 0x88, 0xe8, 0x26, 0xba, 0x66, 0x95, 0x07, 0x7c, 0x75, 0xc0, 0xa6, 0x93,
	0xe8, 0x06, 0xa4, 0x67, 0x79, 0x7b, 0xc0, 0x92, 0x2b, 0x90, 0xa6, 0x59, 0x9e, 0xe9, 0xdb, 0x43,
	0xe5, 0x09, 0xa1, 0x95, 0x96, 0x6c, 0x19, 0x66, 0x82, 0xc3, 0xbd, 0x4b, 0x5c, 0xb1, 0x45, 0xc2,
	0x99, 0x16, 0xd2, 0xeb, 0xf4, 0x17, 0x7f, 0x34, 0xc8, 0xe9, 0xc5, 0x2d, 0x44, 0xb9, 0x86, 0xa1,
	0x19, 0x9a, 0xb1, 0x8a, 0x83, 0x6f, 0xc8, 0x71, 0x0a, 0x4a, 0xb1, 0x18, 0x54, 0xa7, 0xf6, 0xa2,
	0xfe, 0xb2, 0xf1, 0xa6, 0x4b, 0x71, 0xa2, 0x68, 0x45, 0x49, 0xc7, 0x2a, 0x9e, 0x96, 0xda, 0xee,
	0xbf, 0x84, 0xd4, 0x8d, 0xff, 0x15, 0x39, 0x56, 0x90, 0xf1, 0x30, 0x55, 0x71, 0xa7, 0xf6, 0xa2,
	0xf6, 0xb2, 0xf1, 0xe6, 0x84, 0x9a, 0x79, 0xa3, 0xef, 0x21, 0xe3, 0x63, 0x15, 0x8f, 0x1e, 0x4c,
	0x1f, 0x29, 0xfb, 0x33, 0xf8, 0x8e, 0x9c, 0x64, 0xb0, 0x0e, 0xb5, 0xb8, 0x81, 0x0c, 0x0d, 0x1f,
	0xa0, 0xe1, 0x29, 0x2d, 0x86, 0x88, 0x4e, 0x60, 0x7d, 0x69, 0xb2, 0xd6, 0xd8, 0xc8, 0x36, 0xc7,
	0xe0, 0x7b, 0xf2, 0x58, 0x81, 0x0e, 0x8d, 0x14, 0xbd, 0x75, 0xf4, 0x76, 0x37, 0xde, 0xf7, 0xa0,
	0x7f, 0x61, 0x8b, 0x05, 0xe8, 0x09, 0x4b, 0xc1, 0x02, 0x88, 0x2a, 0x4f, 0xc1, 0x05, 0x69, 0x45,
	0x12, 0x98, 0x86, 0xd0, 0x4e, 0x38, 0x42, 0x3e, 0x44, 0xc8, 0x27, 0xd4, 0x86, 0xe8, 0x39, 0x0a,
	0x2e, 0xf0, 0x60, 0x09, 0xa7, 0x91, 0x1f, 0x0a, 0x46, 0x24, 0x90, 0xb0, 0x00, 0xa6, 0x3c, 0xce,
	0x11, 0x72, 0x3a, 0x05, 0x67, 0x6a, 0x15, 0xdb, 0xa0, 0xa6, 0xac, 0xc4, 0x4c, 0x41, 0x12, 0x74,
	0x2e, 0xb3, 0x6d, 0xd0, 0x43, 0xbf, 0xa0, 0x29, 0x0a, 0xbc, 0x82, 0xa4, 0x1f, 0x0a, 0xde, 0x91,
	0x56, 0xbe, 0xe4, 0x95, 0x77, 0x3d, 0x42, 0x4c, 0xaf, 0xc0, 0x5c, 0xa1, 0xc0, 0x7a, 0x7e, 0x62,
	0x52, 0x27, 0xa0, 0x1c, 0x2d, 0xdf, 0xca, 0x18, 0xda, 0x98, 0xb4, 0x5d, 0x97, 0x22, 0x91, 0x69,
	0xc9, 0x22, 0x8d, 0xbc, 0x63, 0xe4, 0x3d, 0xa7, 0xc5, 0xf7, 0xe8, 0x3a, 0x75, 0xee, 0x34, 0x16,
	0xe6, 0xfa, 0xbb, 0x15, 0x34, 0x38, 0x57, 0x9c, 0x87, 0xfb, 0xa8, 0x8a, 0xb3, 0x05, 0x56, 0x70,
	0x79, 0x35, 0x18, 0xbc, 0x23, 0x81, 0x99, 0x81, 0xcd, 0x78, 0x23, 0x8d, 0x20, 0xed, 0x8c, 0x6e,
	0xc2, 0x66, 0x16, 0x7e, 0x2e, 0x4f, 0xee, 0x0f, 0x50, 0x95, 0x58, 0xf0, 0x03, 0x69, 0x32, 0xce,
	0x43, 0xb6, 0x5c, 0x4a, 0xb1, 0x62, 0x0b, 0x64, 0x35, 0x90, 0xd5, 0xa6, 0xd9, 0x5c, 0xd3, 0x01,
	0xe7, 0x03, 0x97, 0xb3, 0x88, 0x27, 0xcc, 0x8b, 0x04, 0x23, 0xd2, 0x96, 0x90, 0x8a, 0x15, 0xf8,
	0x8c, 0xc7, 0xc8, 0x78, 0x86, 0x8c, 0x29, 0xe6, 0x7d, 0x4c, 0x4b, 0x56, 0x83, 0xc1, 0x84, 0x3c,
	0x4b, 0x94, 0xca, 0x21, 0x2c, 0xb6, 0x44, 0x98, 0xcd, 0x6d, 0xab, 0x4e, 0xdc, 0x40, 0x14, 0x09,
	0xfa, 0xa3, 0xd1, 0x6d, 0x7d, 0x24, 0x6d, 0x34, 0x5e, 0xb9, 0xf4, 0x64, 0x8e, 0x8d, 0xfa, 0x95,
	0x9c, 0x99, 0xa7, 0x95, 0x34, 0xc6, 0xb9, 0x04, 0xa5, 0x4a, 0xea, 0x13, 0xd7, 0xb2, 0x92, 0x3a,
	0xe0, 0xfc, 0xdc, 0x6c, 0xc1, 0x81, 0x15, 0x5a, 0x74, 0x87, 0x71, 0x5e, 0x80, 0x5d, 0xc2, 0xf1,
	0x7f, 0x23, 0xcf, 0xdd, 0xcb, 0x77, 0xae, 0x30, 0xf8, 0x53, 0xc4, 0x7f, 0xbe, 0xc1, 0xdb, 0x36,
	0xfc, 0xcf, 0x0d, 0x96, 0x52, 0xb9, 0xc4, 0xdc, 0x70, 0x49, 0x3a, 0xb6, 0x23, 0x9b, 0x0d, 0x5d,
	0x56, 0xdf, 0x44, 0xfc, 0xa7, 0x74, 0x93, 0xda, 0xe9, 0xca, 0x53, 0x34, 0x0f, 0x4b, 0x81, 0xab,
	0x7b, 0x44, 0x3e, 0xb6, 0x54, 0xbb, 0xc0, 0x4b, 0x62, 0xcb, 0x2d, 0x22, 0x1b, 0xde, 0xa1, 0xb5,
	0xd0, 0x74, 0x89, 0x49, 0x47, 0x0a, 0xc9, 0x99, 0xab, 0xcf, 0x5b, 0xd1, 0x25, 0x31, 0x40, 0xe2,
	0x67, 0xd4, 0x4f, 0xef, 0x90, 0xed, 0x23, 0x87, 0x85, 0x68, 0x22, 0xb8, 0xfb, 0x0b, 0x87, 0x47,
	0xa4, 0x9e, 0xaa, 0x78, 0xd8, 0xfc, 0xf3, 0xae, 0x57, 0xfb, 0xeb, 0xae, 0x57, 0xfb, 0xfb, 0xae,
	0x57, 0xfb, 0xfd, 0x9f, 0xde, 0x83, 0xd9, 0x43, 0x5c, 0xe6, 0x6f, 0xff, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0xad, 0xf8, 0x2e, 0x0e, 0x08, 0x00, 0x00,
}
